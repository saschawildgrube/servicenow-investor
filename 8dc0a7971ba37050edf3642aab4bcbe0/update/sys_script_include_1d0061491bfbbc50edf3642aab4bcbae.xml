<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_investor.CalculatePositions</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>CalculatePositions</name>
        <script><![CDATA[function CalculatePositions(strPortfolioSysId)
{
	var GetRecord = x_snc_devtools.GetRecord;
	var IsValidRecord = x_snc_devtools.IsValidRecord;
	var GetValue = x_snc_devtools.GetValue;
	var GetKeys = x_snc_devtools.GetKeys;
	var RenderValue = x_snc_devtools.RenderValue;
	var RecordQueryOrInsert = x_snc_devtools.RecordQueryOrInsert;

	
	var grPortfolio = GetRecord('x_snc_investor_portfolio',strPortfolioSysId);
	if (IsValidRecord(grPortfolio) == false)
	{
		return false;
	}
	
	/*
	var grPosition = new GlideRecord('x_snc_investor_position');
	grPosition.addQuery('portfolio','=',strPortfolioSysId);
	grPosition.deleteMultiple();
	*/
	
	var positions = {};
	
	var fRealizedProfit = 0;
	var fRealizedLoss = 0;
	var fRealizedTotal = 0;
	
	var grTransaction = new GlideRecord('x_snc_investor_transaction');
	grTransaction.addQuery('portfolio','=',strPortfolioSysId);
	grTransaction.orderBy('date');
	grTransaction.query();
	while (grTransaction.next())
	{
		//Debug(RenderValue(grTransaction));
		var strInstrumentSysId = grTransaction.instrument;
		var strType = grTransaction.type;
		var nAmount = grTransaction.amount;
		var fPrice = grTransaction.price;
		var fCharges = grTransaction.charges;
		var strDate = grTransaction.date;
		var instrument = GetValue(positions,strInstrumentSysId);
		if (instrument == null)
		{
			positions[strInstrumentSysId] = {
				amount: 0,
				price_avg: 0,
				charges: 0
			};
		}
		
		if (strType == 'buy')
		{
			var nOldAmount = positions[strInstrumentSysId]['amount'];
			var nNewAmount = nOldAmount + nAmount;
			var fOldPriceAvg = positions[strInstrumentSysId]['price_avg'];
			var fOldCharges = positions[strInstrumentSysId]['charges'];
			var fNewPriceAvg = 
				(
					(fOldPriceAvg * nOldAmount)
					+ (nAmount * fPrice)
				) / nNewAmount;
			positions[strInstrumentSysId]['price_avg'] = fNewPriceAvg;
			positions[strInstrumentSysId]['amount'] = nNewAmount;
			positions[strInstrumentSysId]['charges'] = fOldCharges + fCharges;
		}
		if (strType == 'sell')
		{
			var nNewAmount = positions[strInstrumentSysId]['amount'] - nAmount;
			var fPriceAvg = positions[strInstrumentSysId]['price_avg'];
			var fOldCharges = positions[strInstrumentSysId]['charges'];
			
			var fNewCharges = fOldCharges + fCharges;
					
			var fRealizedTransaction = (nAmount * (fPrice - fPriceAvg)) - fNewCharges; 
			
			fRealizedTotal += fRealizedTransaction;
			if (fRealizedTransaction > 0)
			{
				fRealizedProfit += fRealizedTransaction;
			}
			else
			{
				fRealizedLoss += fRealizedTransaction;
			}
				
			
			if (nNewAmount <= 0)
			{
				nNewAmount = 0;
				fPriceAvg = 0;
			}
			positions[strInstrumentSysId]['amount'] = nNewAmount;
			positions[strInstrumentSysId]['price_avg'] = fPriceAvg;
			positions[strInstrumentSysId]['charges'] = 0;
		}
		if (strType == 'dividend')
		{
			fRealizedTransaction = fPrice - fCharges;
			fRealizedTotal += fRealizedTransaction;
			if (fRealizedTransaction > 0)
			{
				fRealizedProfit += fRealizedTransaction;
			}
			else
			{
				fRealizedLoss += fRealizedTransaction;
			}
			
		}
	}

	//Debug(RenderValue(positions));
	
	var aInstruments = GetKeys(positions);
	
	for (var nInstrument = 0; nInstrument < aInstruments.length; nInstrument++)
	{
		var strInstrumentSysId = aInstruments[nInstrument];
		var position = positions[strInstrumentSysId];
		var nAmount = position.amount;
		if (nAmount > 0)
		{

			var fValue = 0;
			var fBestPrice = 0;
			var strBestPrice = '';
			var strBestPriceDate = '';
			var fCostbase = position.amount * position.price_avg
			var bestprice = GetBestPriceForInstrument(strInstrumentSysId,grPortfolio.currency);
			if (bestprice != false)
			{
				fBestPrice = bestprice.price;
				strBestPriceDate = bestprice.date;
			}
			
			if (fBestPrice == 0)
			{
				fBestPrice = position.price_avg;
				strBestPriceDate = '';
				fValue = fCostbase;
			}
			else
			{
				fValue = fBestPrice * position.amount;
			}
			
			var fPerformance = ((grPosition.value / grPosition.costbase) * 100) - 100;
			var fGain = grPosition.value - grPosition.costbase;
		
			
			
			RecordQueryOrInsert(
				'x_snc_investor_position',
				{
					portfolio: strPortfolioSysId,
					instrument: strInstrumentSysId
				},
				{
					amount: position.amount,
					price_avg: position.price_avg,
					costbase: fCostbase,
					value: fValue,
					gain: fGain,
					performance: fPerformance,
					price_best: fBestPrice,
					price_best_date: strBestPriceDate
				})
			/*
			var grPosition = new GlideRecord('x_snc_investor_position');
			grPosition.initialize();
			grPosition.portfolio = strPortfolioSysId;
			grPosition.instrument = strInstrumentSysId;
			grPosition.amount = position.amount;
			grPosition.price_avg = position.price_avg;
			grPosition.costbase = grPosition.amount * grPosition.price_avg;  

			var fBestPrice = 0;
			var strDateBestPrice = '';
			var bestprice = GetBestPriceForInstrument(strInstrumentSysId,grPortfolio.currency);
			if (bestprice != false)
			{
				fBestPrice = bestprice.price;
				strBestPriceDate = bestprice.date;
			}
			
			if (fBestPrice == 0)
			{
				grPosition.price_best = grPosition.price_avg;
				grPosition.price_best_date = '';
				grPosition.value = grPosition.costbase;
			}
			else
			{
				grPosition.price_best = fBestPrice;
				grPosition.price_best_date = strBestPriceDate;
				grPosition.value = fBestPrice * grPosition.amount;
			}
			
			grPosition.performance = ((grPosition.value / grPosition.costbase) * 100) - 100;
			grPosition.gain = grPosition.value - grPosition.costbase;
			
			grPosition.insert();
			*/
		}
		else
		{
			var grPosition = new GlideRecord('x_snc_investor_position');
			grPosition.addQuery('portfolio','=',strPortfolioSysId);
			grPosition.addQuery('instrument','=',strInstrumentSysId);
			grPosition.query();
			grPosition.deleteMultiple();

		}
	}
	
	grPortfolio.realized_profit = fRealizedProfit;
	grPortfolio.realized_loss = fRealizedLoss;
	grPortfolio.realized_total = fRealizedTotal;
	grPortfolio.update();
	
	return true;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-11-11 19:05:27</sys_created_on>
        <sys_id>1d0061491bfbbc50edf3642aab4bcbae</sys_id>
        <sys_mod_count>42</sys_mod_count>
        <sys_name>CalculatePositions</sys_name>
        <sys_package display_value="Investor WORK IN PROGRESS" source="x_snc_investor">8dc0a7971ba37050edf3642aab4bcbe0</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Investor WORK IN PROGRESS">8dc0a7971ba37050edf3642aab4bcbe0</sys_scope>
        <sys_update_name>sys_script_include_1d0061491bfbbc50edf3642aab4bcbae</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-11-28 13:00:51</sys_updated_on>
    </sys_script_include>
</record_update>
